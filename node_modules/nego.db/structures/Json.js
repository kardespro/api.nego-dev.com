const fs = require("fs");
const path = require("path")
const err = 'Error: If you need help? https://negodev.tk/discord'
const version = '2.0.6'
//const negoConf = {max_usage: 1}
//const cf = require("./analizer")

module.exports = class Json {

constructor(filePath){
this.json = filePath || "./negodb.json";
this.db = {};
if(!fs.existsSync(this.json)){
fs.writeFileSync(this.json, "{}", "utf-8");
//cf.analize(this.json)
} else {
this.file();
  //cf.analize(this.file)
}
}

file(){
const savedData = JSON.parse(fs.readFileSync(this.json));
if(typeof savedData === "object"){
this.db = savedData;
}
}
save(){
 /* var ulimit = fs.statSync(this.json).size
if(ii > ulimit) return new TypeError("NEGODB | Maximum Usage Limit Has Exceeded | If You Want To Increase Limit Edit **negodb.config.js** File ! ")*/
return fs.writeFileSync(this.json, JSON.stringify(this.db, null, 2), "utf-8");
}
get(key){
if(!key) return console.error(err)
return this.db[key];
}
fetch(key){
if(!key) return console.error(err)
return this.db[key];
}
has(key){
if(!key) return console.error(err)
return Boolean(this.db[key]);
}
set(key, value){ 
if(!key) return console.error(err)
if(!value) return console.error(err)
this.db[key] = value;
this.save();
return "true"
//return this.save();
}
delete(key){
if(!key) return console.error(err)
delete this.db[key];
this.save();
return "true"
//return this.save();
}
add(key, count){
if(!key) return console.error(err)
if(!count) return console.error(err)
if(!this.db[key]) this.db[key] = 0;
this.db[key] += count;
this.save();
return "true"
//return this.save();
}
sub(key, count){
if(!key) return console.error(err)
if(!count) return console.error(err)
if(!this.db[key]) this.db[key] = 0;
this.db[key] -= count;
return this.save();
}
push(key, element){
if(!key) return console.error(err)
if(!element) return console.error(err)
if (!this.db[key]) this.db[key] = [];
this.db[key].push(element);
this.save();
return "true"
//return this.save();
}
clear(){
this.db = {};
this.save();
}
size(){
    var nego = fs.statSync(this.json).size;
    return nego;
}
version(){
    return version;
}
//ping
_get(){
const start = Date.now();
		this.get("negodb");
		return Date.now() - start;
}
_set(){
    const start = Date.now();
		this.set("negodb", "negodb");
		this.save()
		return Date.now() - start;
}
ping(){
    const read = this._get();
		const write = this._set();
		const average = (read + write) / 2;
		this.delete("negodb")
		return {
			read: `${read}ms`,
			write: `${write}ms`,
			average: `${average}ms`
		};
}
all() {
return this.db
}};